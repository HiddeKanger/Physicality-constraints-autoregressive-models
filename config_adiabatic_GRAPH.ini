
[Transformer]
#number of self-attention/decoder layers
NUM_LAYERS = 1
#number of heads in multi-head attention
NUM_HEADS = 8
#hidden dimension of model
D_MODEL = 16
#dimension of feed forward network
D_FFN = 16
#dropout rate for training
DROPOUT_RATE = 0.0
#vocabilary size (POVM = 4)
TARGET_VOCAB_SIZE = 4

[Quantum Circuit]
#number of qubits in circuit
N_QUBITS = 3
#POVM string, see POVM.py
POVM = TETRA
#what gate is applied: is evaluated, supports Python code!
GATES = ["CZ"] * (N_QUBITS - 1)
#how many qubits the gate acts on: is evaluated, supports Python code!
GATE_TYPES = [2] * (N_QUBITS-1)
#where is the operation applied: is evaluated, supports Python code!
SITES = [[x, x + 1] for x in range(N_QUBITS - 1)]
#input state of all qubits to circuit
START_STATE = +
#intended state to learn
TARGET_STATE = GRAPH

[Training]
#total amount of samples in entire dataset
N_DATASET = 20000
#total amount of samples for evaluation
N_EVAL = 1000
#training epochs
EPOCHS = [1500] * (N_QUBITS - 1)
#how many samples are generated
BATCH_SIZE = 10000
#MONTE CARLO simulation batch size
MC_BATCH_SIZE = 25000
#ADAM LEARNING RATE
LEARNING_RATE = [5e-3]*len(EPOCHS)
#MAIN L2 LOSS PARAMETER: 2D array, [GATE_INDEX][EPOCH_INDEX]
ALPHA = [[1]*EPOCHS[0]]*len(GATES)
#PHYSICALITY LOSS PARAMETER: 2D array, [GATE_INDEX][EPOCH_INDEX]
BETA = [[5e-3]*int(EPOCHS[0] * 0.5) + [0]*int(EPOCHS[0] * 0.5)]*len(GATES)
#LAMBDA PROJECTION COEFFICIENT
GAMMA = [[0]*int(EPOCHS[0] * 0.5) + [1e-4]*int(EPOCHS[0] * 0.5)]*len(GATES)
#DELTA POLYGON VIOLATION TERM
DELTA = [[0]*int(EPOCHS[0])]*len(GATES)
#TARGET LAMBDAS FOR SUBSYSTEM
LAMBDA_TARGET = [[[0, 0, 0, 1], [0, 0, 0.5, 0.5], [0, 0, 0.5, 0.5]], [[0, 0, 0.5, 0.5], [0, 0, 0.5, 0.5], [0, 0, 0.5, 0.5]]]
; LAMBDA_TARGET = [[[0, 0, 0.5, 0.5]], [[0, 0, 0.5, 0.5]]]
#print more statistics during training
VERBOSE = True
#do we want to simulate the exact prob. distr.
EXACT_SIM = True
#how many subepochs we want to do for L2 optimization
L2_EPOCHS = 10
#how many subepochs we want for physicality optimization
PHYS_EPOCHS = 10
#what subsystems do we want to restrict
SUBSYS_RESTR = [[0, 1], [1, 2], [0, 2]]
; SUBSYS_RESTR = [[0, 1]]

[Adiabatic]
STEPS = [1]*len(EPOCHS)